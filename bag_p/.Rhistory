mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
View(time_chromosomes01)
initialization()
View(time_chromosomes01)
View(time_chromosomes02)
fitness()
N_count <- 1
#定義變數，會依照場地數量決定chromosomes與fitness大小，並且chromosomes為日期時段表示，fitnessF為隊伍時段表示
P_count <- 0 #建立比賽數量
pair <- 0 #建立比賽隊伍
#建立染色體模型
time_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
elite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
initialization()
View(time_chromosomes01)
View(time_chromosomes02)
View(time_chromosomes03)
fitness()
View(time_fitness01)
fitness <- function(){
#將chromosomes轉化為fitness
s <- 0
for(i in c(1:N_count)){
for(j in c(1:(N*Q))){
s <- j%%Q
if(s==0){s <- Q}
g <- 1+(N_day*(i-1))
time_fitness01[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes01[s,c(g:(N_day*i))]))[2]
time_fitness02[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes02[s,c(g:(N_day*i))]))[2]
time_fitness03[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes03[s,c(g:(N_day*i))]))[2]
time_fitness04[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes04[s,c(g:(N_day*i))]))[2]
elite_fitness[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),elite_chromosomes[s,c(g:(N_day*i))]))[2]
mutation_fitness[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),mutation_chromosomes[s,c(g:(N_day*i))]))[2]
}
}
#缺失值處理，如果NA補0
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness01[i])){
time_fitness01[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness02[i])){
time_fitness02[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness03[i])){
time_fitness03[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness04[i])){
time_fitness04[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(elite_fitness[i])){
elite_fitness[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(mutation_fitness[i])){
mutation_fitness[i] <<- 0
}
}
#懲罰判斷
#針對同一天打兩次比賽做判斷，若同天有同隊比賽超過一次，給與設定值懲罰
P_1 <- rep(1, times = 6, each = 1)
for(i in c(1:(N_day*N_count))){
for(j in c(1:N)){
tmp <- table(grepl(j,time_chromosomes01[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[1] <- P_1[1]+RTR
}
tmp <- table(grepl(j,time_chromosomes02[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[2] <- P_1[2]+RTR
}
tmp <- table(grepl(j,time_chromosomes03[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[3] <- P_1[3]+RTR
}
tmp <- table(grepl(j,time_chromosomes04[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[4] <- P_1[4]+RTR
}
tmp <- table(grepl(j,elite_chromosomes[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[5] <- P_1[5]+RTR
}
tmp <- table(grepl(j,mutation_chromosomes[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[6] <- P_1[6]+RTR
}
}
}
#適應值計算，共4個染色體[(最大時段-最小時段)*懲罰]
fitness_value[1] <<- (time_fitness01[order(time_fitness01,decreasing=TRUE)[1:(N*Q)][1]]-time_fitness01[order(time_fitness01,decreasing=TRUE)[1:(N*Q)][(N*Q)]])*P_1[1]
fitness_value[2] <<- (time_fitness02[order(time_fitness02,decreasing=TRUE)[1:(N*Q)][1]]-time_fitness02[order(time_fitness02,decreasing=TRUE)[1:(N*Q)][(N*Q)]])*P_1[2]
fitness_value[3] <<- (time_fitness03[order(time_fitness03,decreasing=TRUE)[1:(N*Q)][1]]-time_fitness03[order(time_fitness03,decreasing=TRUE)[1:(N*Q)][(N*Q)]])*P_1[3]
fitness_value[4] <<- (time_fitness04[order(time_fitness04,decreasing=TRUE)[1:(N*Q)][1]]-time_fitness04[order(time_fitness04,decreasing=TRUE)[1:(N*Q)][(N*Q)]])*P_1[4]
fitness_value[5] <<- (elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q)][1]]-elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q)][(N*Q)]])*P_1[5]
fitness_value[6] <<- (mutation_fitness[order(mutation_fitness,decreasing=TRUE)[1:(N*Q)][1]]-mutation_fitness[order(mutation_fitness,decreasing=TRUE)[1:(N*Q)][(N*Q)]])*P_1[6]
}
fitness()
select_chromosomes()
select_chromosomes()
order(fitness_value)
order(fitness_value-1)
order(fitness_value[c[1:5]])
order(fitness_value[c(1:5)])
select_chromosomes <- function(){
r <- order(fitness_value[c(1:5)])
if(r[1]==1){
select_c01 <<- time_chromosomes01
}else if(r[1]==2){
select_c01 <<- time_chromosomes02
}else if(r[1]==3){
select_c01 <<- time_chromosomes03
}else if(r[1]==4){
select_c01 <<- time_chromosomes04
}else if(r[1]==5){
select_c01 <<- elite_chromosomes
}
if(r[2]==1){
select_c02 <<- time_chromosomes01
}else if(r[2]==2){
select_c02 <<- time_chromosomes02
}else if(r[2]==3){
select_c02 <<- time_chromosomes03
}else if(r[2]==4){
select_c02 <<- time_chromosomes04
}else if(r[2]==5){
select_c02 <<- elite_chromosomes
}
}
select_chromosomes()
elite()
crossover <- function(){
#選出兩個染色體須交配的比賽隊伍，此選擇為亂數不重複，且須有比賽隊伍，並不能一樣
r1 <-  sample(length(select_c01),2,replace = FALSE)
r2 <-  sample(length(select_c02),2,replace = FALSE)
while (select_c01[r1[1]]=="0" || select_c02[r1[2]]=="0" || select_c01[r1[1]]==select_c02[r1[2]]){
r1 <-  sample(length(select_c01),2,replace = FALSE)
}
while (select_c01[r2[1]]=="0" || select_c02[r2[2]]=="0" || select_c01[r2[1]]==select_c02[r2[2]]){
r2 <- sample(length(select_c02),2,replace = FALSE)
}
#開始交配
#第一次交配(產生兩個後代)
t1 <- rep(0, times = 2, each = 1)
t1[1] <- grep(select_c02[r1[2]],select_c01)
t1[2] <- grep(select_c01[r1[1]],select_c02)
time_chromosomes01 <<- select_c01
time_chromosomes02 <<- select_c02
time_chromosomes01[r1[1]] <<- select_c01[t1[1]]
time_chromosomes01[t1[1]] <<- select_c01[r1[1]]
time_chromosomes02[r1[2]] <<- select_c02[t1[2]]
time_chromosomes02[t1[2]] <<- select_c02[r1[2]]
#第二次交配(產生兩個後代)
t2 <- rep(0, times = 2, each = 1)
t2[1] <- grep(select_c02[r2[2]],select_c01)
t2[2] <- grep(select_c01[r2[1]],select_c02)
time_chromosomes03 <<- select_c01
time_chromosomes04 <<- select_c02
time_chromosomes03[r2[1]] <<- select_c01[t2[1]]
time_chromosomes03[t2[1]] <<- select_c01[r2[1]]
time_chromosomes04[r2[2]] <<- select_c02[t2[2]]
time_chromosomes04[t2[2]] <<- select_c02[r2[2]]
fitness()
}
crossover()
View(time_chromosomes01)
View(time_chromosomes02)
View(time_chromosomes03)
View(time_chromosomes04)
mutation()
main <- function(){
initialization()#初始化
for(i in c(1:1000)){#執行n次，也可將條件以低於限制條件後數據
fitness()#計算fitness_value
select_chromosomes()#選種
elite()#菁英政策
crossover()#交配
mutation()#突變
}
fitness()#計算最後一次fitness_value(適應值)
print(fitness_value[5])#輸出這次計算時最好結果的適應值
print(elite_chromosomes)#輸出這次計算時最好結果的放入順序
View(elite_chromosomes)
View(elite_fitness)
}
#定義變數，會依照場地數量決定chromosomes與fitness大小，並且chromosomes為日期時段表示，fitnessF為隊伍時段表示
P_count <- 0 #建立比賽數量
pair <- 0 #建立比賽隊伍
#建立染色體模型
time_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
elite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
main()
View(time_chromosomes03)
View(time_fitness03)
N_count <- 2
P_count <- 0 #建立比賽數量
pair <- 0 #建立比賽隊伍
#建立染色體模型
time_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
elite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
main()
View(time_fitness01)
fitness_value
View(elite_fitness)
View(elite_chromosomes)
(elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q)][1]]-elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q)][(N*Q)]])
elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q)][1]]
elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q)][(N*Q)]]
(elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][1]]-elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[5]
(elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][1]]-elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])
fitness <- function(){
#將chromosomes轉化為fitness
s <- 0
for(i in c(1:N_count)){
for(j in c(1:(N*Q))){
s <- j%%Q
if(s==0){s <- Q}
g <- 1+(N_day*(i-1))
time_fitness01[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes01[s,c(g:(N_day*i))]))[2]
time_fitness02[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes02[s,c(g:(N_day*i))]))[2]
time_fitness03[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes03[s,c(g:(N_day*i))]))[2]
time_fitness04[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes04[s,c(g:(N_day*i))]))[2]
elite_fitness[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),elite_chromosomes[s,c(g:(N_day*i))]))[2]
mutation_fitness[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),mutation_chromosomes[s,c(g:(N_day*i))]))[2]
}
}
#缺失值處理，如果NA補0
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness01[i])){
time_fitness01[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness02[i])){
time_fitness02[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness03[i])){
time_fitness03[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(time_fitness04[i])){
time_fitness04[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(elite_fitness[i])){
elite_fitness[i] <<- 0
}
}
for(i in c(1:(N*Q*N_count))){
if(is.na(mutation_fitness[i])){
mutation_fitness[i] <<- 0
}
}
#懲罰判斷
#針對同一天打兩次比賽做判斷，若同天有同隊比賽超過一次，給與設定值懲罰
P_1 <- rep(1, times = 6, each = 1)
for(i in c(1:(N_day*N_count))){
for(j in c(1:N)){
tmp <- table(grepl(j,time_chromosomes01[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[1] <- P_1[1]+RTR
}
tmp <- table(grepl(j,time_chromosomes02[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[2] <- P_1[2]+RTR
}
tmp <- table(grepl(j,time_chromosomes03[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[3] <- P_1[3]+RTR
}
tmp <- table(grepl(j,time_chromosomes04[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[4] <- P_1[4]+RTR
}
tmp <- table(grepl(j,elite_chromosomes[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[5] <- P_1[5]+RTR
}
tmp <- table(grepl(j,mutation_chromosomes[,i]))[2]
if(is.na(tmp)){
tmp <- 0
}
if(tmp>1){
P_1[6] <- P_1[6]+RTR
}
}
}
#適應值計算，共4個染色體[(最大時段-最小時段)*懲罰]
fitness_value[1] <<- (time_fitness01[order(time_fitness01,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness01[order(time_fitness01,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[1]
fitness_value[2] <<- (time_fitness02[order(time_fitness02,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness02[order(time_fitness02,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[2]
fitness_value[3] <<- (time_fitness03[order(time_fitness03,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness03[order(time_fitness03,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[3]
fitness_value[4] <<- (time_fitness04[order(time_fitness04,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness04[order(time_fitness04,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[4]
fitness_value[5] <<- (elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][1]]-elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[5]
fitness_value[6] <<- (mutation_fitness[order(mutation_fitness,decreasing=TRUE)[1:(N*Q*N_count)][1]]-mutation_fitness[order(mutation_fitness,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[6]
}
fitness()
#資料設定
N <- 8 #隊伍總數
N_count <- 1 #比賽球場總數
N_day <- 7 #比賽天數
Q <- 4 #總時段數
#限制要求懲罰比重
RTR <- 100 #每天只能一場比賽
#設定數據名稱
N_name <- c("A","B","C","D","E","F","G","H")
N_count_name <- c("Taipei","Taichung")
Q_time <- c("13:00","14:45","16:30","18:15")
#定義變數，會依照場地數量決定chromosomes與fitness大小，並且chromosomes為日期時段表示，fitnessF為隊伍時段表示
P_count <- 0 #建立比賽數量
pair <- 0 #建立比賽隊伍
#建立染色體模型
time_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
elite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
#資料設定
N <- 16 #隊伍總數
N_count <- 2 #比賽球場總數
N_day <- 15 #比賽天數
Q <- 4 #總時段數
#限制要求懲罰比重
RTR <- 100 #每天只能一場比賽
#設定數據名稱
N_name <- c("A","B","C","D","E","F","G","H")
N_count_name <- c("Taipei","Taichung")
Q_time <- c("13:00","14:45","16:30","18:15")
#定義變數，會依照場地數量決定chromosomes與fitness大小，並且chromosomes為日期時段表示，fitnessF為隊伍時段表示
P_count <- 0 #建立比賽數量
pair <- 0 #建立比賽隊伍
#建立染色體模型
time_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
elite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
N <- 8 #隊伍總數
N_count <- 2 #比賽球場總數
N_day <- 7 #比賽天數
Q <- 4 #總時段數
#限制要求懲罰比重
RTR <- 100 #每天只能一場比賽
#設定數據名稱
N_name <- c("A","B","C","D","E","F","G","H")
N_count_name <- c("Taipei","Taichung")
Q_time <- c("13:00","14:45","16:30","18:15")
#定義變數，會依照場地數量決定chromosomes與fitness大小，並且chromosomes為日期時段表示，fitnessF為隊伍時段表示
P_count <- 0 #建立比賽數量
pair <- 0 #建立比賽隊伍
#建立染色體模型
time_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
time_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
elite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
mutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#建立適應值模型
time_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
time_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
elite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
mutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))
fitness_value <- rep(0, times = 6, each = 1)
#建立選種模型
select_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
select_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))
#定義突變機率(1~100)
mutation_rate <- 100
initialization()
fitness()
View(time_fitness02)
select_chromosomes()
fitness_value
main()
