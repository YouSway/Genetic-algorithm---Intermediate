{
    "collab_server" : "",
    "contents" : "#資料設定\nN <- 8 #隊伍總數\nN_count <- 2 #比賽球場總數\nN_day <- 7 #比賽天數\nQ <- 4 #總時段數\n\n#限制要求懲罰比重\nRTR <- 100 #每天只能一場比賽\n\n#設定數據名稱\nN_name <- c(\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\")\nN_count_name <- c(\"Taipei\",\"Taichung\")\nQ_time <- c(\"13:00\",\"14:45\",\"16:30\",\"18:15\")\n\n\n#定義變數，會依照場地數量決定chromosomes與fitness大小，並且chromosomes為日期時段表示，fitnessF為隊伍時段表示\nP_count <- 0 #建立比賽數量\npair <- 0 #建立比賽隊伍\n#建立染色體模型\ntime_chromosomes01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\ntime_chromosomes02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\ntime_chromosomes03 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\ntime_chromosomes04 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\nelite_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\nmutation_chromosomes <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\n#建立適應值模型\ntime_fitness01 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))\ntime_fitness02 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))\ntime_fitness03 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))\ntime_fitness04 <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))\nelite_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))\nmutation_fitness <- matrix(c(1:(N*Q*N_count)), nrow = Q, ncol = (N*N_count))\nfitness_value <- rep(0, times = 6, each = 1)\n#建立選種模型\nselect_c01 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\nselect_c02 <- matrix(c(1:(N_day*Q*N_count)), nrow = Q, ncol = (N_day*N_count))\n#定義突變機率(1~100)\nmutation_rate <- 100\n\n\n\n#主程式\nmain <- function(){\n  \n  initialization()#初始化\n  for(i in c(1:1000)){#執行n次，也可將條件以低於限制條件後數據\n    \n    fitness()#計算fitness_value\n    select_chromosomes()#選種\n    elite()#菁英政策\n    crossover()#交配\n    mutation()#突變\n\n  }\n  fitness()#計算最後一次fitness_value(適應值)\n  print(fitness_value[5])#輸出這次計算時最好結果的適應值\n  print(elite_chromosomes)#輸出這次計算時最好結果的放入順序\n  View(elite_chromosomes)\n  View(elite_fitness)\n}\n\n\n#初代設定()\ninitialization <- function(){\n  \n  #清除變數\n  P_count <<- 0\n  pair <<- 0\n  time_chromosomes01[1:length(time_chromosomes01)] <<- 0\n  time_chromosomes02[1:length(time_chromosomes02)] <<- 0\n  time_chromosomes03[1:length(time_chromosomes03)] <<- 0\n  time_chromosomes04[1:length(time_chromosomes04)] <<- 0\n  elite_chromosomes[1:length(elite_chromosomes)] <<- 0\n  time_fitness01[1:length(time_fitness01)] <<- 0\n  time_fitness02[1:length(time_fitness02)] <<- 0\n  time_fitness03[1:length(time_fitness03)] <<- 0\n  time_fitness04[1:length(time_fitness04)] <<- 0\n  elite_fitness[1:length(elite_fitness)] <<- 0\n  select_c01[1:length(select_c01)] <<- 0\n  select_c02[1:length(select_c02)] <<- 0\n  \n  #判斷總場數\n  P_count <<- 0\n  for(i in c(1:(N-1))){\n    for(j in c(i:(N-1))){\n      P_count <<- P_count+1\n    }\n  }\n  \n  #建立隊伍配對模型\n  pair <<- rep(0, times = P_count, each = 1) \n  a <- 0\n  \n  #此迴圈建立單循環賽表，並將組何放入pair\n  for(i in c(1:(N-1))){ \n    for(j in c((i+1):N)){\n      a <- a+1\n      pair[a] <<- paste(i, j, sep = \",\")\n    }\n  }\n  \n  #依照比賽場地數量來分配每個場地需對戰場數\n  a <- rep(floor(P_count/N_count), times = N_count, each = 1)\n  if(P_count-sum(a)!=0){\n    for(i in c(1:(P_count-sum(a)))){\n      a[i] <- a[i]+1\n    }\n  }\n  \n  #將比賽組何打亂後依造場地數量方配隨機放入chromosomes\n  r1 <- sample(P_count,P_count,replace = FALSE)\n  r2 <- sample(P_count,P_count,replace = FALSE)\n  r3 <- sample(P_count,P_count,replace = FALSE)\n  r4 <- sample(P_count,P_count,replace = FALSE)\n  r5 <- sample(P_count,P_count,replace = FALSE)\n  tem <- 0\n  tem2 <- 0\n  for(i in c(1:N_count)){\n    a1 <- sample(a[i],a[i],replace = FALSE)\n    a2 <- sample(P_count,a[i],replace = FALSE)\n    a1_2 <- sample(a[i],a[i],replace = FALSE)\n    a2_2 <- sample(P_count,a[i],replace = FALSE)\n    a1_3 <- sample(a[i],a[i],replace = FALSE)\n    a2_3 <- sample(P_count,a[i],replace = FALSE)\n    a1_4 <- sample(a[i],a[i],replace = FALSE)\n    a2_4 <- sample(P_count,a[i],replace = FALSE)\n    a1_5 <- sample(a[i],a[i],replace = FALSE)\n    a2_5 <- sample(P_count,a[i],replace = FALSE)\n    \n    for(j in c(1:a[i])){\n      time_chromosomes01[a2[a1[j]]+tem2] <<- pair[r1[a1[j]+tem]]\n      time_chromosomes02[a2_2[a1_2[j]]+tem2] <<- pair[r2[a1_2[j]+tem]]\n      time_chromosomes03[a2_3[a1_3[j]]+tem2] <<- pair[r3[a1_3[j]+tem]]\n      time_chromosomes04[a2_4[a1_4[j]]+tem2] <<- pair[r4[a1_4[j]+tem]]\n      elite_chromosomes[a2_5[a1_5[j]]+tem2] <<- pair[r5[a1_5[j]+tem]]\n    }\n    tem <- tem+a[i]\n    tem2 <-tem2+P_count\n  }\n  mutation_chromosomes <<- time_chromosomes01\n  \n  \n}\n\n\n#計算適應值\nfitness <- function(){\n  \n  \n  #將chromosomes轉化為fitness\n  s <- 0\n  for(i in c(1:N_count)){\n    for(j in c(1:(N*Q))){\n      \n      s <- j%%Q #確認時段\n      if(s==0){s <- Q}\n      g <- 1+(N_day*(i-1))\n      time_fitness01[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes01[s,c(g:(N_day*i))]))[2]\n      time_fitness02[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes02[s,c(g:(N_day*i))]))[2]\n      time_fitness03[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes03[s,c(g:(N_day*i))]))[2]\n      time_fitness04[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),time_chromosomes04[s,c(g:(N_day*i))]))[2]\n      elite_fitness[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),elite_chromosomes[s,c(g:(N_day*i))]))[2]\n      mutation_fitness[j+((i-1)*Q*N)] <<- table(grepl(ceiling(j/Q),mutation_chromosomes[s,c(g:(N_day*i))]))[2]\n      \n    }\n    \n  }\n  \n  #缺失值處理，如果NA補0\n  for(i in c(1:(N*Q*N_count))){\n    if(is.na(time_fitness01[i])){\n      time_fitness01[i] <<- 0\n    }\n  }\n  for(i in c(1:(N*Q*N_count))){\n    if(is.na(time_fitness02[i])){\n      time_fitness02[i] <<- 0\n    }\n  }\n  for(i in c(1:(N*Q*N_count))){\n    if(is.na(time_fitness03[i])){\n      time_fitness03[i] <<- 0\n    }\n  }\n  for(i in c(1:(N*Q*N_count))){\n    if(is.na(time_fitness04[i])){\n      time_fitness04[i] <<- 0\n    }\n  }\n  for(i in c(1:(N*Q*N_count))){\n    if(is.na(elite_fitness[i])){\n      elite_fitness[i] <<- 0\n    }\n  }\n  for(i in c(1:(N*Q*N_count))){\n    if(is.na(mutation_fitness[i])){\n      mutation_fitness[i] <<- 0\n    }\n  }\n  \n  \n  \n  #懲罰判斷\n  \n  #針對同一天打兩次比賽做判斷，若同天有同隊比賽超過一次，給與設定值懲罰\n  P_1 <- rep(1, times = 6, each = 1)\n  for(i in c(1:(N_day*N_count))){\n    for(j in c(1:N)){\n      tmp <- table(grepl(j,time_chromosomes01[,i]))[2]\n      if(is.na(tmp)){\n        tmp <- 0\n      }\n      if(tmp>1){\n        P_1[1] <- P_1[1]+RTR\n      }\n      tmp <- table(grepl(j,time_chromosomes02[,i]))[2]\n      if(is.na(tmp)){\n        tmp <- 0\n      }\n      if(tmp>1){\n        P_1[2] <- P_1[2]+RTR\n      }\n      tmp <- table(grepl(j,time_chromosomes03[,i]))[2]\n      if(is.na(tmp)){\n        tmp <- 0\n      }\n      if(tmp>1){\n        P_1[3] <- P_1[3]+RTR\n      }\n      tmp <- table(grepl(j,time_chromosomes04[,i]))[2]\n      if(is.na(tmp)){\n        tmp <- 0\n      }\n      if(tmp>1){\n        P_1[4] <- P_1[4]+RTR\n      }\n      tmp <- table(grepl(j,elite_chromosomes[,i]))[2]\n      if(is.na(tmp)){\n        tmp <- 0\n      }\n      if(tmp>1){\n        P_1[5] <- P_1[5]+RTR\n      }\n      tmp <- table(grepl(j,mutation_chromosomes[,i]))[2]\n      if(is.na(tmp)){\n        tmp <- 0\n      }\n      if(tmp>1){\n        P_1[6] <- P_1[6]+RTR\n      }\n    }\n  }\n  \n  #適應值計算，共4個染色體[(最大時段-最小時段)*懲罰]\n  fitness_value[1] <<- (time_fitness01[order(time_fitness01,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness01[order(time_fitness01,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[1]\n  fitness_value[2] <<- (time_fitness02[order(time_fitness02,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness02[order(time_fitness02,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[2]\n  fitness_value[3] <<- (time_fitness03[order(time_fitness03,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness03[order(time_fitness03,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[3]\n  fitness_value[4] <<- (time_fitness04[order(time_fitness04,decreasing=TRUE)[1:(N*Q*N_count)][1]]-time_fitness04[order(time_fitness04,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[4]\n  fitness_value[5] <<- (elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][1]]-elite_fitness[order(elite_fitness,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[5]\n  fitness_value[6] <<- (mutation_fitness[order(mutation_fitness,decreasing=TRUE)[1:(N*Q*N_count)][1]]-mutation_fitness[order(mutation_fitness,decreasing=TRUE)[1:(N*Q*N_count)][(N*Q*N_count)]])*P_1[6]\n  \n}\n\n\n#選種(可變動，目前先依適應值最理想的兩個染色體做選擇)\nselect_chromosomes <- function(){\n  \n  r <- order(fitness_value[c(1:5)])\n  \n  if(r[1]==1){\n    select_c01 <<- time_chromosomes01\n  }else if(r[1]==2){\n    select_c01 <<- time_chromosomes02\n  }else if(r[1]==3){\n    select_c01 <<- time_chromosomes03\n  }else if(r[1]==4){\n    select_c01 <<- time_chromosomes04\n  }else if(r[1]==5){\n    select_c01 <<- elite_chromosomes\n  }\n  \n  if(r[2]==1){\n    select_c02 <<- time_chromosomes01\n  }else if(r[2]==2){\n    select_c02 <<- time_chromosomes02\n  }else if(r[2]==3){\n    select_c02 <<- time_chromosomes03\n  }else if(r[2]==4){\n    select_c02 <<- time_chromosomes04\n  }else if(r[2]==5){\n    select_c02 <<- elite_chromosomes\n  }\n  \n}\n\n\n#交配(使用雙點交配，交配兩次)\ncrossover <- function(){\n  \n  #選出兩個染色體須交配的比賽隊伍，此選擇為亂數不重複，且須有比賽隊伍，並不能一樣\n  r1 <-  sample(length(select_c01),2,replace = FALSE)\n  r2 <-  sample(length(select_c02),2,replace = FALSE)\n  while (select_c01[r1[1]]==\"0\" || select_c02[r1[2]]==\"0\" || select_c01[r1[1]]==select_c02[r1[2]]){\n    r1 <-  sample(length(select_c01),2,replace = FALSE)\n  }\n  while (select_c01[r2[1]]==\"0\" || select_c02[r2[2]]==\"0\" || select_c01[r2[1]]==select_c02[r2[2]]){\n    r2 <- sample(length(select_c02),2,replace = FALSE)\n  }\n  \n  \n  #開始交配\n  #第一次交配(產生兩個後代)\n  t1 <- rep(0, times = 2, each = 1)\n  t1[1] <- grep(select_c02[r1[2]],select_c01)\n  t1[2] <- grep(select_c01[r1[1]],select_c02)\n  time_chromosomes01 <<- select_c01\n  time_chromosomes02 <<- select_c02\n  time_chromosomes01[r1[1]] <<- select_c01[t1[1]]\n  time_chromosomes01[t1[1]] <<- select_c01[r1[1]]\n  time_chromosomes02[r1[2]] <<- select_c02[t1[2]]\n  time_chromosomes02[t1[2]] <<- select_c02[r1[2]]\n  \n  #第二次交配(產生兩個後代)\n  t2 <- rep(0, times = 2, each = 1)\n  t2[1] <- grep(select_c02[r2[2]],select_c01)\n  t2[2] <- grep(select_c01[r2[1]],select_c02)\n  time_chromosomes03 <<- select_c01\n  time_chromosomes04 <<- select_c02\n  time_chromosomes03[r2[1]] <<- select_c01[t2[1]]\n  time_chromosomes03[t2[1]] <<- select_c01[r2[1]]\n  time_chromosomes04[r2[2]] <<- select_c02[t2[2]]\n  time_chromosomes04[t2[2]] <<- select_c02[r2[2]]\n  \n  fitness()\n  \n}\n\n\n#突變(隨機選擇一個數字，再依機率選擇要不要突變)\nmutation <- function(){\n  \n  #突變機率\n  r <- rep(0, times = 4, each = 1)\n  for(i in c(1:4)){\n    r[i] <- sample(100,1,replace = FALSE)\n  }\n  \n  \n  for(i in c(1:4)){\n\n    \n    if(r[i]<=mutation_rate){\n      \n      #突變第一個染色體\n      if(i==1){\n        \n        #暫存未突變前染色體\n        mutation_chromosomes <<- time_chromosomes01\n        #可以判斷哪個時段哪個隊伍參賽次數過多，若有多組隊伍同樣則亂數決定\n        tmp_1 <- grep(time_fitness01[order(time_fitness01)[N*Q*N_count]],time_fitness01)[sample(length(grep(time_fitness01[order(time_fitness01)[N*Q*N_count]],time_fitness01)),1)]\n        #確認隊伍\n        team_1 <- ceiling(tmp_1/Q)-(N*floor(floor(tmp_1/Q)/N))\n        #確認時段\n        time_1 <- tmp_1%%Q\n        if(time_1==0){time_1 <- 4}\n        #確認場地\n        site_1 <- ceiling(tmp_1/(N*Q))\n        \n        #突變對象天數\n        mutation_day_1 <- grep(team_1,time_chromosomes01[seq(time_1, Q*N_day*site_1, Q)])[sample(length(grep(team_1,time_chromosomes01[seq(time_1, Q*N_day*site_1, Q)])),1)]\n        #突變對象位置\n        mutation_location_1 <- (Q*(mutation_day_1-1))+time_1\n        #突變交換位置\n        mr <- sample(Q,1)\n        while(mr==time_1){mr <- sample(Q,1)}\n        mutation_switch_1 <- (Q*(mutation_day_1-1))+mr\n        #突變\n        tem <- mutation_chromosomes[mutation_location_1]\n        mutation_chromosomes[mutation_location_1] <<- mutation_chromosomes[mutation_switch_1]\n        mutation_chromosomes[mutation_switch_1] <<- tem\n        fitness()\n        if(fitness_value[6] <= fitness_value[1]){time_chromosomes01 <<- mutation_chromosomes}\n        \n      }\n      \n      #突變第二個染色體\n      if(i==2){\n        \n        #暫存未突變前染色體\n        mutation_chromosomes <<- time_chromosomes02\n        #可以判斷哪個時段哪個隊伍參賽次數過多，若有多組隊伍同樣則亂數決定\n        tmp_1 <- grep(time_fitness02[order(time_fitness02)[N*Q*N_count]],time_fitness02)[sample(length(grep(time_fitness02[order(time_fitness02)[N*Q*N_count]],time_fitness02)),1)]\n        #確認隊伍\n        team_1 <- ceiling(tmp_1/Q)-(N*floor(floor(tmp_1/Q)/N))\n        #確認時段\n        time_1 <- tmp_1%%Q\n        if(time_1==0){time_1 <- 4}\n        #確認場地\n        site_1 <- ceiling(tmp_1/(N*Q))\n        \n        #突變對象天數\n        mutation_day_1 <- grep(team_1,time_chromosomes02[seq(time_1, Q*N_day*site_1, Q)])[sample(length(grep(team_1,time_chromosomes02[seq(time_1, Q*N_day*site_1, Q)])),1)]\n        #突變對象位置\n        mutation_location_1 <- (Q*(mutation_day_1-1))+time_1\n        #突變交換位置\n        mr <- sample(Q,1)\n        while(mr==time_1){mr <- sample(Q,1)}\n        mutation_switch_1 <- (Q*(mutation_day_1-1))+mr\n        #突變\n        tem <- mutation_chromosomes[mutation_location_1]\n        mutation_chromosomes[mutation_location_1] <<- mutation_chromosomes[mutation_switch_1]\n        mutation_chromosomes[mutation_switch_1] <<- tem\n        fitness()\n        if(fitness_value[6] <= fitness_value[2]){time_chromosomes02 <<- mutation_chromosomes}\n        \n      }\n      \n      #突變第三個染色體\n      if(i==3){\n        \n        #暫存未突變前染色體\n        mutation_chromosomes <<- time_chromosomes03\n        #可以判斷哪個時段哪個隊伍參賽次數過多，若有多組隊伍同樣則亂數決定\n        tmp_1 <- grep(time_fitness03[order(time_fitness03)[N*Q*N_count]],time_fitness03)[sample(length(grep(time_fitness03[order(time_fitness03)[N*Q*N_count]],time_fitness03)),1)]\n        #確認隊伍\n        team_1 <- ceiling(tmp_1/Q)-(N*floor(floor(tmp_1/Q)/N))\n        #確認時段\n        time_1 <- tmp_1%%Q\n        if(time_1==0){time_1 <- 4}\n        #確認場地\n        site_1 <- ceiling(tmp_1/(N*Q))\n        \n        #突變對象天數\n        mutation_day_1 <- grep(team_1,time_chromosomes03[seq(time_1, Q*N_day*site_1, Q)])[sample(length(grep(team_1,time_chromosomes03[seq(time_1, Q*N_day*site_1, Q)])),1)]\n        #突變對象位置\n        mutation_location_1 <- (Q*(mutation_day_1-1))+time_1\n        #突變交換位置\n        mr <- sample(Q,1)\n        while(mr==time_1){mr <- sample(Q,1)}\n        mutation_switch_1 <- (Q*(mutation_day_1-1))+mr\n        #突變\n        tem <- mutation_chromosomes[mutation_location_1]\n        mutation_chromosomes[mutation_location_1] <<- mutation_chromosomes[mutation_switch_1]\n        mutation_chromosomes[mutation_switch_1] <<- tem\n        fitness()\n        if(fitness_value[6] <= fitness_value[3]){time_chromosomes03 <<- mutation_chromosomes}\n        \n      }\n      \n      #突變第四個染色體\n      if(i==4){\n        \n        #暫存未突變前染色體\n        mutation_chromosomes <<- time_chromosomes04\n        #可以判斷哪個時段哪個隊伍參賽次數過多，若有多組隊伍同樣則亂數決定\n        tmp_1 <- grep(time_fitness04[order(time_fitness04)[N*Q*N_count]],time_fitness04)[sample(length(grep(time_fitness04[order(time_fitness04)[N*Q*N_count]],time_fitness04)),1)]\n        #確認隊伍\n        team_1 <- ceiling(tmp_1/Q)-(N*floor(floor(tmp_1/Q)/N))\n        #確認時段\n        time_1 <- tmp_1%%Q\n        if(time_1==0){time_1 <- 4}\n        #確認場地\n        site_1 <- ceiling(tmp_1/(N*Q))\n        \n        #突變對象天數\n        mutation_day_1 <- grep(team_1,time_chromosomes04[seq(time_1, Q*N_day*site_1, Q)])[sample(length(grep(team_1,time_chromosomes04[seq(time_1, Q*N_day*site_1, Q)])),1)]\n        #突變對象位置\n        mutation_location_1 <- (Q*(mutation_day_1-1))+time_1\n        #突變交換位置\n        mr <- sample(Q,1)\n        while(mr==time_1){mr <- sample(Q,1)}\n        mutation_switch_1 <- (Q*(mutation_day_1-1))+mr\n        #突變\n        tem <- mutation_chromosomes[mutation_location_1]\n        mutation_chromosomes[mutation_location_1] <<- mutation_chromosomes[mutation_switch_1]\n        mutation_chromosomes[mutation_switch_1] <<- tem\n        sss <<- mutation_chromosomes\n        sss1 <<- time_chromosomes04\n        fitness()\n        if(fitness_value[6] <= fitness_value[4]){time_chromosomes04 <<- mutation_chromosomes}\n        \n      }\n      \n      \n    }\n  }\n  fitness()\n  \n  \n}\n\n\n\n#菁英政策\nelite <- function(){\n  #可在變動，目前以染色體中最優質一項做保留\n  elite_chromosomes<<-select_c01\n}",
    "created" : 1503689281815.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1140449619",
    "id" : "C4F82DD3",
    "lastKnownWriteTime" : 1503918885,
    "last_content_update" : 1503918885493,
    "path" : "C:/Users/user/Desktop/jialing/bag_p/main.R",
    "project_path" : "main.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}